<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2014-2017, Red Hat, Inc. and/or its affiliates, and individual
    contributors by the @authors tag. 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!-- Configures the Camel Context-->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
    <camelContext id="_camelContext1" xmlns="http://camel.apache.org/schema/spring">

        <!-- Rest DSL wrapper for SOAP service generated by wsdl2rest -->
        <dataFormats>
            <xmljson id="xmljson"/>
        </dataFormats>
        
        <restConfiguration component="jetty" host="localhost" port="8081" bindingMode="json">
        </restConfiguration>

        <rest id="id-a58bd3d1-26c6-4145-890d-5aaa9a1aa445" path="/jaxrs">

          <get id="id-d74ed074-7885-4919-8e8e-a23224fcb35e" uri="/countryforcity/{arg0}" 
            type="java.lang.String"
            outType="java.lang.String">
            <to uri="direct:getCountryForCity"/>
          </get>

          <get id="id-de1c63a2-a351-4f61-b1a0-e6aba8900911" uri="/randomcity" 
            outType="java.lang.String">
            <to uri="direct:getRandomCity"/>
          </get>
        </rest>

        <route id="getCountryForCity">
            <from uri="direct:getCountryForCity" />
            <log loggingLevel="INFO" message="getCountryForCity"/>
            <setBody>
                <simple>${header.arg0}</simple>
            </setBody>
            <unmarshal>
                <json library="Jackson" unmarshalTypeName="java.lang.String"/>
            </unmarshal>
            <to uri="cxf://http://localhost:9999/ws/random?serviceClass=com.simple.ws.SimpleWS&amp;defaultOperationName=getCountryForCity"/>
            <setHeader headerName="Content-Type">
               <constant>text/plain</constant>
            </setHeader>
            <setBody>
                <simple>${body}</simple>
            </setBody>
        </route>
        
        <route id="getRandomCity">
            <from uri="direct:getRandomCity" />
            <log loggingLevel="INFO" message="getRandomCity"/>
            <setBody>
                <simple>null</simple>
            </setBody>
            <to uri="cxf://http://localhost:9999/ws/random?serviceClass=com.simple.ws.SimpleWS&amp;defaultOperationName=getRandomCity"/>
            <setHeader headerName="Content-Type">
               <constant>text/plain</constant>
            </setHeader>
            <setBody>
                <simple>${body}</simple>
            </setBody>
        </route>

        <route id="_city">
            <!-- every few seconds, kick this off with a random city/country pair -->
            <from id="_fromTimer" uri="timer://simpleTimer?period=10000&amp;repeatCount=3"/>
            <!-- get the random city name -->
            <log message="Retrieving random city"/>
            <toD id="_toCity" uri="http://localhost:8081/jaxrs/randomcity"/>

            <!-- pass along city name -->
            <setHeader headerName="cityName">
                <simple resultType="String">${body}</simple>
            </setHeader>
            <log message="Random city passed: $simple{header.cityName}"/>
            <to uri="direct:getCountry" />
        </route>

        <route id="_country">
            <!-- get the country code for the random city -->
            <from uri="direct:getCountry"/>
            <log message="Retrieving country code for: $simple{in.header.cityName}"/>
            <setHeader headerName="CamelHttpMethod">
                <constant>GET</constant>
            </setHeader>
            <!-- stash city -->
            <setProperty propertyName="stashCity">
                <simple resultType="String">$simple{in.header.cityName}</simple>
            </setProperty>
            <toD id="_toCountry" uri="http://localhost:8081/jaxrs/countryforcity/%22$simple{in.header.cityName}%22"/>

            <!-- set city in header-->
            <setHeader headerName="cityName">
                <simple resultType="String">$simple{property.stashCity}</simple>
            </setHeader>
            <!-- set country in header -->
            <setHeader headerName="countryName">
                <simple resultType="String">${body}</simple>
            </setHeader>
            <log message="Country for random city $simple{header.cityName} = $simple{header.countryName}"/>
            <to uri="direct:getWeather" />
        </route>

        <route id="_weather">
            <from uri="direct:getWeather"/>
            <!-- get application ID from https://home.openweathermap.org/api_keys when you sign up for a free account -->
            <setProperty propertyName="appId">
                <constant>WEATHERAPIID</constant> <!-- replace this with your API key -->
            </setProperty>
            <setProperty propertyName="weatherUri">
                <simple>q=$simple{in.header.cityName},$simple{in.header.countryName}%26APPID=${property.appId}%26mode=xml</simple>
            </setProperty>
            <toD id="_toWeather" uri="http://api.openweathermap.org/data/2.5/weather?${property.weatherUri}"/>

            <!-- output the response -->
            <setBody id="_setWeatherBody">
                <simple>Received a weather response: ${body}</simple>
            </setBody>
            <to id="_toStream" uri="stream:out"/>
        </route>
    </camelContext>
</beans>
