<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2014-2017, Red Hat, Inc. and/or its affiliates, and individual
    contributors by the @authors tag. 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!-- Configures the Camel Context-->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
    <camelContext id="_camelContext1" xmlns="http://camel.apache.org/schema/spring">

        <!-- Rest DSL wrapper for SOAP service generated by wsdl2rest -->
        <dataFormats>
            <xmljson id="xmljson"/>
        </dataFormats>
        
        <restConfiguration component="jetty" host="localhost" port="8081" bindingMode="json">
        </restConfiguration>

        <rest id="id-a58bd3d1-26c6-4145-890d-5aaa9a1aa445" path="/jaxrs">

          <get id="id-d74ed074-7885-4919-8e8e-a23224fcb35e" uri="/countryforcity/{arg0}" 
            type="java.lang.String"
            outType="java.lang.String">
            <to uri="direct:getCountryForCity"/>
          </get>

          <get id="id-de1c63a2-a351-4f61-b1a0-e6aba8900911" uri="/randomcity" 
            outType="java.lang.String">
            <to uri="direct:getRandomCity"/>
          </get>
        </rest>

        <route id="getCountryForCity">
            <from uri="direct:getCountryForCity" />
            <log loggingLevel="INFO" message="getCountryForCity"/>
            <setBody>
                <simple>${header.arg0}</simple>
            </setBody>
            <unmarshal>
                <json library="Jackson" unmarshalTypeName="java.lang.String"/>
            </unmarshal>
            <to uri="cxf://http://localhost:9999/ws/random?serviceClass=com.simple.ws.SimpleWS&amp;defaultOperationName=getCountryForCity"/>
            <setHeader headerName="Content-Type">
               <constant>text/plain</constant>
            </setHeader>
            <setBody>
                <simple>${body}</simple>
            </setBody>
        </route>
        
        <route id="getRandomCity">
            <from uri="direct:getRandomCity" />
            <log loggingLevel="INFO" message="getRandomCity"/>
            <setBody>
                <simple>null</simple>
            </setBody>
            <to uri="cxf://http://localhost:9999/ws/random?serviceClass=com.simple.ws.SimpleWS&amp;defaultOperationName=getRandomCity"/>
            <setHeader headerName="Content-Type">
               <constant>text/plain</constant>
            </setHeader>
            <setBody>
                <simple>${body}</simple>
            </setBody>
        </route>

        <!-- my simple integration -->
        <route id="_route1">
            <!-- every few seconds, kick this off with a random city/country pair -->
            <from id="_fromTimer" uri="timer://simpleTimer?period=10000&amp;repeatCount=3"/>

            <!-- get the random city name -->
            <log id ="_log1" message="Retrieving random city"/>
            <toD id="_toCity" uri="http://localhost:8081/jaxrs/randomcity"/>
            <setProperty id="_propertyCity" propertyName="cityName">
                <simple>${body}</simple>
            </setProperty>

            <!-- get the country code for the random city -->
            <!-- weird behavior - calling property a second time, it's empty -->
            <!-- <log id="_logMe2" message="Retrieving country code for city ${exchangeProperty.cityName}"/>
            <log id="_logMe3" message="Retrieving country code for city ${exchangeProperty.cityName} again"/> -->

            <!-- this fails -->
            <!-- Caused by: 2019-03-27 08:28:44.153 ERROR 14540 [r://simpleTimer] o.a.camel.processor.DefaultErrorHandler  : Failed delivery for (MessageId: ID-brianf-work-1553696919944-0-5 on ExchangeId: ID-brianf-work-1553696919944-0-1). Exhausted after delivery attempt: 1 caught: org.apache.camel.http.common.HttpOperationFailedException: HTTP operation failed invoking http://localhost:8081/jaxrs/countryforcity/%22Mumbai%22 with statusCode: 405 -->
            <!-- the URL runs fine outside of the Camel route - http://localhost:8081/jaxrs/countryforcity/%22Mumbai%22 -->
            <toD id="_toCountry" uri="http://localhost:8081/jaxrs/countryforcity/%22${exchangeProperty.cityName}%22"/>
            <setProperty id="_propertyCountry" propertyName="countryName">
                <simple>${body}</simple>
            </setProperty>

            <!-- based on weird property behavior this seems to clear the header after it's called -->
            <!-- <log id="_logMe4" message="Retrieved country ${header.countryName}"/> -->

            <!-- get application ID from https://home.openweathermap.org/api_keys when you sign up for a free account -->
            <setHeader headerName="appId">
                <constant>edb0497f39df0cb266c17ecff48dfe30</constant> <!-- replace this with your API key -->
            </setHeader>
            <setHeader headerName="weatherUri">
                <simple>http://api.openweathermap.org/data/2.5/weather?q=${exchangeProperty.cityName},${exchangeProperty.countryName}%26APPID=${header.appId}</simple>
            </setHeader>
            <toD id="_toWeather" uri="${header.weatherUri}"/>

            <!-- output the response -->
            <setBody id="_setWeatherBody">
                <simple>Received a weather response: ${body}</simple>
            </setBody>
            <to id="_toStream" uri="stream:out"/>
        </route>
    </camelContext>
</beans>
